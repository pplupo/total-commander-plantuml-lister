name: Build PlantUML WebView2 Lister

on:
  workflow_dispatch: {}

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: MSVC Dev Cmd
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install tools
        shell: pwsh
        run: |
          choco install ninja zip -y

      - name: Fetch NuGet + WebView2 SDK
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          New-Item -ItemType Directory -Path tools -Force | Out-Null
          Invoke-WebRequest -Uri "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe" -OutFile "tools\nuget.exe"
          & tools\nuget.exe install Microsoft.Web.WebView2 -OutputDirectory "$env:RUNNER_TEMP\wv2" | Out-String
          $pkg = Get-ChildItem "$env:RUNNER_TEMP\wv2" -Directory | Where-Object { $_.Name -like "Microsoft.Web.WebView2.*" } | Sort-Object Name -Descending | Select-Object -First 1
          if (-not $pkg) { throw "WebView2 NuGet package not found" }

          $inc = Join-Path $pkg.FullName "build\native\include"
          $x64 = Join-Path $pkg.FullName "build\native\x64"

          New-Item -ItemType Directory -Path "third_party\WebView2\build\native\include" -Force | Out-Null
          New-Item -ItemType Directory -Path "third_party\WebView2\build\native\x64" -Force | Out-Null
          Copy-Item "$inc\*.h" "third_party\WebView2\build\native\include\" -Force
          Copy-Item "$x64\WebView2Loader.dll" "third_party\WebView2\build\native\x64\" -Force
          Copy-Item "$x64\WebView2Loader.dll.lib" "third_party\WebView2\build\native\x64\" -Force

      - name: Configure (CMake, Release)
        shell: pwsh
        run: cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build
        shell: pwsh
        run: cmake --build build --config Release -v

      # --- Stage files into a clean folder ---
      - name: Stage plugin files
        shell: pwsh
        run: |
          $stage = "package/PlantUmlWebView"
          Remove-Item -Recurse -Force $stage -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Force -Path $stage | Out-Null
      
          Copy-Item -Force dist\PlantUmlWebView.wlx64         $stage\
          Copy-Item -Force third_party\WebView2\build\native\x64\WebView2Loader.dll $stage\
          Copy-Item -Force resources\pluginst.inf             $stage\
          Copy-Item -Force src\plantumlwebview.ini            $stage\
          if (Test-Path README.md) { Copy-Item -Force README.md $stage\ }
      
      # --- Package ONCE: files at the root of the zip ---
      - name: Package (single zip with correct root)
        shell: pwsh
        run: |
          $out = "PlantUmlWebView.zip"
          Remove-Item -Force $out -ErrorAction SilentlyContinue
          # make sure no old zips creep into the payload
          Get-ChildItem package\PlantUmlWebView -Filter *.zip -File -Recurse | Remove-Item -Force
      
          Compress-Archive -Path package\PlantUmlWebView\* -DestinationPath $out -Force
      
          # Sanity-check: pluginst.inf must be at zip root and no nested zips
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $zip = [IO.Compression.ZipFile]::OpenRead($out)
          $hasInfAtRoot = $zip.Entries | Where-Object { $_.FullName -ieq 'pluginst.inf' } | ForEach-Object { $true } | Select-Object -First 1
          $nestedZips   = $zip.Entries | Where-Object { $_.FullName -match '\.zip$' }
          $zip.Dispose()
          if (-not $hasInfAtRoot) { throw "pluginst.inf is not at the root of $out" }
          if ($nestedZips)       { throw "Nested zip(s) found in $out: $($nestedZips.FullName -join ', ')" }
      
      # --- Upload just the one zip we created ---
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: PlantUmlWebView
          path: PlantUmlWebView.zip
